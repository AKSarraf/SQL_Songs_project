Narration of the `musicDB` SQL Script

This SQL script is designed to create and populate a structured relational database named `musicDB`, which stores information about music artists, genres, albums, songs, and playlists. Below is an overview of its components:

1. Database Creation

- The script begins by creating a database named `musicDB`, ensuring that all subsequent tables and operations are executed within this database.

2. Table Definitions

- Artists Table: Stores information about musicians or bands, including their name, birth date, and nationality.
- Genres Table: Contains different music genres.
- Albums Table: Represents albums, each linked to a specific artist.
- Songs Table: Stores song details such as title, album, genre, duration, and release date.
- Playlists Table: Represents user-created playlists with an automatically generated timestamp.
- Playlist-Songs Table: A junction table that establishes a many-to-many relationship between playlists and songs.

3. Data Insertion

- Artists: Includes famous musicians like The Beatles, Adele, Taylor Swift, and Beethoven.
- Genres: Covers a variety of music genres such as Pop, Rock, Jazz, Classical, and Hip-Hop.

- Albums: Lists popular albums from different artists.
- Songs: Populates songs with associated albums and genres.
- Playlists: Represents user-curated playlists like "Chill Vibes" and "Workout Mix."
- Playlist-Songs: Links songs to playlists, creating a many-to-many relationship.

4. Query Examples

- Retrieve all songs by a specific artist by joining the `songs`, `albums`, and `artists` tables.
- Retrieve all albums of a specific genre by linking the `albums`, `songs`, and `genres` tables.
- Retrieve all songs in a given playlist using a join between `playlist_songs` and `songs`.

This script provides a structured and MECE (Mutually Exclusive, Collectively Exhaustive) approach to organizing and querying a music database, making it suitable for use in applications requiring structured music data storage.